#include <stdio.h>
#include <string.h>

#define MAX_TASKS 10

struct Task {
    char description[50];
    int completed;
};

void displayMenu() {
    printf("\n===== Student To-Do List =====\n");
    printf("1. Add Task\n");
    printf("2. View Tasks\n");
    printf("3. Mark Task as Completed\n");
    printf("4. Exit\n");
    printf("==============================\n");
}

void addTask(struct Task tasks[], int *taskCount) {
    if (*taskCount < MAX_TASKS) {
        printf("Enter task description: ");
        scanf(" %[^\n]", tasks[*taskCount].description);
        tasks[*taskCount].completed = 0; // Task is initially not completed
        (*taskCount)++;
        printf("Task added successfully.\n");
    } else {
        printf("To-Do list is full. Cannot add more tasks.\n");
    }
}

void viewTasks(struct Task tasks[], int taskCount) {
    if (taskCount == 0) {
        printf("No tasks available. Add tasks first.\n");
    } else {
        printf("\n===== To-Do List =====\n");
        for (int i = 0; i < taskCount; i++) {
            printf("%d. [%s] %s\n", i + 1, tasks[i].completed ? "X" : " ", tasks[i].description);
        }
        printf("=======================\n");
    }
}

void markTaskCompleted(struct Task tasks[], int taskCount) {
    if (taskCount == 0) {
        printf("No tasks available. Add tasks first.\n");
    } else {
        int taskIndex;
        viewTasks(tasks, taskCount);
        printf("Enter the task number to mark as completed: ");
        scanf("%d", &taskIndex);

        if (taskIndex >= 1 && taskIndex <= taskCount) {
            tasks[taskIndex - 1].completed = 1;
            printf("Task marked as completed.\n");
        } else {
            printf("Invalid task number.\n");
        }
    }
}

int main() {
    struct Task tasks[MAX_TASKS];
    int taskCount = 0;
    int choice;

    do {
        displayMenu();
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addTask(tasks, &taskCount);
                break;
            case 2:
                viewTasks(tasks, taskCount);
                break;
            case 3:
                markTaskCompleted(tasks, taskCount);
                break;
            case 4:
                printf("Exiting the program. Goodbye!\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 4);

    return 0;
}
